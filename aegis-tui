#!/bin/bash

version="1.0.1"

# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
  echo "You must be root to perform this operation."
  exit 1
fi

main_color="#ffd700"
warning_color="#ff0000"

export BORDER_FOREGROUND="$main_color"
export GUM_CONFIRM_SELECTED_BACKGROUND="$main_color"
export GUM_CHOOSE_CURSOR_FOREGROUND="$main_color"
export GUM_CHOOSE_SELECTED_FOREGROUND="$main_color"
export GUM_INPUT_CURSOR_FOREGROUND="$main_color"
export GUM_FILTER_INDICATOR_FOREGROUND="$main_color"
export FOREGROUND="#ffffff"

shopt -s expand_aliases

browser="none"
desktop="none"
shell="none"
theme="none"

Welcome() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Welcome to Aegis TUI" "Athena Fedora or Athena Nix?"
    baseos=$(gum choose --limit 1 'Athena Fedora' 'Athena Nix')

    if [[ "$baseos" == "Athena Fedora" ]]; then
        osbanner=$(printf '%b\n' "$(base64 -d <<<"H4sIAAAAAAAAA52TUQ6EIAxE/z0FRyWuGg+waTRovFtPIilxV2Va0H7SmddCi3MwmLpGy2xMI9OM80d6NERXjaFEQl3O1DJ9mTzTUuk5FejFviJvbtQbqyj7xIwRzwmQ8xaDYCVWkLloowFEExgOjUY7o+zW/qqKtoovptIG2bCO6RP3rKnm/a5qXfbWpgJNz+/vm5SOddyVFqWTwyGfx+cEAYSsMvCn7Yi2HWcEzBuVBAAA" | gunzip)")
    elif [[ "$baseos" == "Athena Nix" ]]; then
        osbanner=$(printf '%b\n' "$(base64 -d <<<"H4sIAAAAAAAAA6WUzQ3DIAyF70zBqDnkkAncWjTqbkzSSlCw8U+tJPIFw/sQz45znl+FR4W9hZLqWbKGlJn8VeH4BVrZCm+SKAwRY7iEEEKKOTMeKMllAjHdo+t34ILE1cOd1sizxnNy2bM8Lh7EY3SKpo/ZteJiPmMym+E+nL1/fXzrCBdqtCPzCAN64bv+U7SjZ4VtxACQAmepDzj416BeftXaizeIaaJWzBgrXveH5pLb+RcIszBtvZF4jlMz9VV/AOenEZ3PBQAA" | gunzip)")
    fi
    clear
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' "$(gum style --foreground "$main_color" "$osbanner")" "Ready to make your Athena installation... ready?" "$(gum style --foreground "$main_color" "aegis-tui version: $version")")" && CONTINUE=true
    if [[ $CONTINUE != "true" ]]; then
        Exit
    fi
}

Timezone() {
    timezone=$(timedatectl list-timezones | gum filter --placeholder "select a timezone")
}

VirtKeymap() {
    if [[ "$baseos" == "Athena Fedora" ]]; then
        virtkeymap=$(localectl list-keymaps | gum filter --placeholder "select a console keymap")
    elif [[ "$baseos" == "Athena Nix" ]]; then
        virtkeymap=$(cat /usr/share/aegis-tui/keymaps | gum filter --placeholder "select a console keymap")
    fi
}

X11Keymap() {
    x11keymap=$(localectl list-x11-keymap-layouts | gum filter --placeholder "select a GUI keymap")
    setxkbmap "$x11keymap" 2> /dev/null
    echo -e "\nKeyboard layout set to '$x11keymap'"
    sleep 3
}

Locale() {
    locale=$(cat /usr/share/aegis-tui/locales | gum filter --placeholder "select a locale")
}

Username() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Please enter your username"
    username=$(gum input --placeholder "athena")
    # Remove spaces from the input string using parameter expansion
    username="${username// /}"
    if [ -z "$username" ]; then
        username="athena"
    fi
}

Password() {
    matches="false"
    passwrong="false"
    while [[ "$matches" == "false" ]]; do
        clear
        if [[ "$passwrong" == "true" ]]; then
            gum style --border normal --margin "1" --padding "1 2" "Passwords did not match, please type the password again"
        else
            gum style --border normal --margin "1" --padding "1 2" "Now enter your password"
        fi
        password=$(gum input --password --placeholder "Please enter a password")
        clear
        gum style --border normal --margin "1" --padding "1 2" "Verify your password"
        password_verif=$(gum input --password --placeholder "Type your password again")
        if [[ "$password" == "$password_verif" ]]; then
            matches="true"
        else
            passwrong="true"
        fi
    done

    if [ -z "$password" ]; then
        password="athena"
    fi
    hashed_password=$(openssl passwd -6 $password)
}

RootPassword() {
    clear
    different_root_password=true
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'Use same password for root?')" && different_root_password=false
    if [[ $different_root_password != "true" ]]; then
        root_password=$password # set root password same as user password
    else
        root_matches="false"
        root_passwrong="false"
        while [[ "$root_matches" == "false" ]]; do
            clear
            if [[ "$root_passwrong" == "true" ]]; then
                gum style --border normal --margin "1" --padding "1 2" "Passwords did not match, please type the root password again"
            else
                gum style --border normal --margin "1" --padding "1 2" "Now enter your root password"
            fi
            root_password=$(gum input --password --placeholder "Please enter a root password")
            clear
            gum style --border normal --margin "1" --padding "1 2" "Verify your root password"
            root_password_verif=$(gum input --password --placeholder "Type your root password again")
            if [[ "$root_password" == "$root_password_verif" ]]; then
                root_matches="true"
            else
                root_passwrong="true"
            fi
        done
    fi

    if [ -z "$root_password" ]; then
        root_password="athena"
    fi
    hashed_root_password=$(openssl passwd -6 ${root_password})
}

Shell() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a default shell"
    shell=$(gum choose --limit 1 fish zsh bash)
}

Hostname() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Please enter a hostname"
    hostname=$(gum input --placeholder "athenaos")
    # Remove spaces from the input string using parameter expansion
    hostname="${hostname// /}"
    if [ -z "$hostname" ]; then
        hostname="athenaos"
    fi
}

UEFICheck() { 
    if [[ $is_uefi == "true" ]]; then
        grub_type="grub-efi"
        grub_location="/boot"
    else
        grub_type="grub-legacy"
        grub_location="$grub_disk"
    fi
}

# Note that currently, only the root partition, in Erase Disk or Manual mode, will be encrypted
LUKSCheck() {
    encrypt_check=false
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'Do you want to encrypt the partiton?')" && encrypt_check=true
    if [[ $encrypt_check == "true" ]]; then
        matches="false"
        passwrong="false"
        while [[ "$matches" == "false" ]]; do
            clear
            if [[ "$passwrong" == "true" ]]; then
                gum style --border normal --margin "1" --padding "1 2" "Passphrases did not match, please type the passphrase again"
            else
                gum style --border normal --margin "1" --padding "1 2" "Now enter your passphrase"
            fi
            luks_passphrase=$(gum input --password --placeholder "Please enter a passphrase")
            clear
            gum style --border normal --margin "1" --padding "1 2" "Verify your passphrase"
            passphrase_verif=$(gum input --password --placeholder "Type your passphrase again")
            if [[ "$luks_passphrase" == "$passphrase_verif" ]]; then
                matches="true"
                echo -n "$luks_passphrase" > /tmp/luks
            else
                passwrong="true"
            fi
        done
    fi
}

RootPartSetting() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select root partition to replace"
    read -r disk_dev root_part _ < <(lsblk -no PKNAME,NAME,SIZE,TYPE,MOUNTPOINTS | grep -v zram | grep -v loop | grep -v sr | grep -v ' disk ' | sed -E 's/[^a-zA-Z0-9./ -]//g' | gum choose --limit 1 --height 20 | awk '{print "/dev/"$1, "/dev/"$2}')
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select root partition mountpoint"
    root_part_mount=$(gum choose --limit 1 --height 20 "none" "/" "/boot" "/home" "/opt" "/tmp" "/usr" "/var")
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select root partition file system"
    root_part_fs=$(gum choose --limit 1 --height 20 "don't format" "btrfs" "ext4" "f2fs" "vfat" "xfs")
    clear
    LUKSCheck
    # type:mount_point:blockdevice:filesystem:encrypt_bool
    partitions+=("root:/mnt$root_part_mount:$root_part:$root_part_fs:$encrypt_check")
}

BootPartSetting() {
    is_uefi=$([ -d /sys/firmware/efi ] && echo true || echo false)

    clear
    gum style --border normal --margin "1" --padding "1 2" "Select existing boot partition"
    read -r grub_disk boot_part _ < <(lsblk -no PKNAME,NAME,SIZE,TYPE,MOUNTPOINTS | grep -v zram | grep -v loop | grep -v sr | grep -v ' disk ' | sed -E 's/[^a-zA-Z0-9./ -]//g' | gum choose --limit 1 --height 20 | awk '{print "/dev/"$1, "/dev/"$2}')
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select boot partition file system"
    if [[ $is_uefi == "true" ]]; then
        boot_part_fs=$(gum choose --limit 1 "don't format" "fat" "vfat")
    else
        boot_part_fs=$(gum choose --limit 1 "don't format" "ext4" "fat" "vfat")
    fi
    
    partitions+=("boot:/mnt/boot:$boot_part:$boot_part_fs:false")
}

SwapPartSetting() {
    clear
    create_swap=false
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'In the previous step, did you create a swap partition?')" && create_swap=true
    if [[ $create_swap == "true" ]]; then
        gum style --border normal --margin "1" --padding "1 2" "Select swap partition"
        swap_part=$(lsblk -no PKNAME,NAME,SIZE,TYPE,MOUNTPOINTS | grep -v zram | grep -v loop | grep -v sr | grep -v ' disk ' | sed -E 's/[^a-zA-Z0-9./ -]//g' | gum choose --limit 1 --height 20 | awk '{print "/dev/"$2}')
        clear

        partitions+=("swap:none:$swap_part:linux-swap:false")
    fi
}

EraseDisk() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Please select the disk to install to" "$(gum style --foreground "$warning_color" 'WARNING: This will erase the whole disk')"
    disk_dev=$(lsblk -pdo name | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1)
    grub_disk=$disk_dev
    is_uefi=$([ -d /sys/firmware/efi ] && echo true || echo false)
    UEFICheck
    clear
    # Swap partition
    create_swap=false
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'Create a swap partition?')" && create_swap=true
    if [[ $create_swap == "true" ]]; then
        gum style --border normal --margin "1" --padding "1 2" "Select a swap partition size"
        swap_size=$(gum choose --limit 1 1GiB 2GiB 4GiB 8GiB)
    fi
    clear
    # Encryption
    LUKSCheck
}

ReplacePart() {
    create_swap=false
    encrypt_check=false
    
    RootPartSetting
    BootPartSetting

    for partition in "${partitions[@]}"; do
      partitions_setup+="\"$partition\", "
    done
    # Remove the trailing comma
    partitions_setup="${partitions_setup%, }"

    UEFICheck
}

ManualDisk() {
    # Initialize to prevent that, in case of change after Summary section, the variables in "partitions" inside JSON file are erroneously duplicated
    partitions=()
    partitions_setup=()
    # 1. Check if UEFI or BIOS
    is_uefi=$([ -d /sys/firmware/efi ] && echo true || echo false)
    if [[ $is_uefi == "true" ]]; then
        # 2. Show what the user has to create like in arch wiki
        gum style --border normal --margin "1" --padding "1 2" "Example partition layout:"
        echo ""
        echo ""

        PART_TABLE=$(gum style --border normal "GPT")
        EFI_PART=$(gum style --border normal "EFI system partition")
        EFI_SIZE=$(gum style --border normal "At least 300 MiB")
        SWAP_PART=$(gum style --border normal "Linux swap")
        SWAP_SIZE=$(gum style --border normal "More than 512 MiB")
        ROOT_PART=$(gum style --border normal "Linux x86-64 root")
        ROOT_SIZE=$(gum style --border normal "Remainder of the device")
        EFI_ROW=$(gum join "$EFI_PART" "$EFI_SIZE")
        SWAP_ROW=$(gum join "$SWAP_PART" "$SWAP_SIZE")
        ROOT_ROW=$(gum join "$ROOT_PART" "$ROOT_SIZE")

        gum join --vertical "$PART_TABLE" "$EFI_ROW" "$SWAP_ROW" "$ROOT_ROW"

    else
        # 2. Show what the user has to create like in arch wiki
        gum style --border normal --margin "1" --padding "1 2" "Example partition layout:"
        echo ""
        echo ""

        PART_TABLE=$(gum style --border normal "DOS")
        SWAP_PART=$(gum style --border normal "Linux swap")
        SWAP_SIZE=$(gum style --border normal "More than 512 MiB")
        ROOT_PART=$(gum style --border normal "Linux x86-64 root")
        ROOT_SIZE=$(gum style --border normal "Remainder of the device")
        SWAP_ROW=$(gum join "$SWAP_PART" "$SWAP_SIZE")
        ROOT_ROW=$(gum join "$ROOT_PART" "$ROOT_SIZE")

        gum join --vertical "$PART_TABLE" "$SWAP_ROW" "$ROOT_ROW"
    fi

    # 3. Open cfdisk
    disk_check="true"
    while [[ "$disk_check" == "true" ]]; do
        gum style --border normal --margin "1" --padding "1 2" "Please select the disk to partition" "$(gum style --foreground "$warning_color" 'WARNING: This will erase all the partitions you will write on')"
        disk_selection=$(lsblk -pdo name | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1 )
        sudo cfdisk $disk_selection
        clear
        gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'Do you need still to partition a disk?')" && disk_check=true || disk_check=false
    done

    # 4. Ask what partition is what
    BootPartSetting
    RootPartSetting
    SwapPartSetting

    for partition in "${partitions[@]}"; do
      partitions_setup+="\"$partition\", "
    done
    # Remove the trailing comma
    partitions_setup="${partitions_setup%, }"

    UEFICheck
}

Partitioning() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a partitioning mode"
    partmode=$(gum choose --limit 1 "Erase Disk" Replace Manual)
    encrypt_check=false

    if [[ "$partmode" == "Erase Disk" ]]; then
        partmode="EraseDisk"
        EraseDisk
    elif [[ "$partmode" == "Replace" ]]; then
        ReplacePart
    elif [[ "$partmode" == "Manual" ]]; then
        ManualDisk
    fi
}

Desktop() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a desktop to use"
    if [[ "$baseos" == "Athena Fedora" ]]; then
        #desktop=$(gum choose --limit 1 --height 20 gnome cinnamon mate bspwm 'kde plasma' hyprland 'xfce refined' 'xfce picom' none)
        desktop=$(gum choose --limit 1 --height 20 gnome cinnamon mate 'kde plasma' 'xfce refined' none)
    elif [[ "$baseos" == "Athena Nix" ]]; then
        desktop=$(gum choose --limit 1 gnome cinnamon mate)
    fi
}

Theme() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a theme to use"
    theme=$(gum choose --limit 1 --height 20 cyborg graphite hackthebox redmoon samurai sweet temple)
}

DisplayManager() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a display manager to use"
    if [[ "$baseos" == "Athena Fedora" ]]; then
        dm=$(gum choose --limit 1 Astronaut 'Black Hole' Cyberpunk Cyborg 'Jake The Dog' Kath 'Pixel Sakura' 'Post-Apocalypse' 'Purple Leaves')
    elif [[ "$baseos" == "Athena Nix" ]]; then
        #dm=$(gum choose --limit 1 gdm 'lightdm neon' sddm)
        dm="sddm"
    fi
}

Browser() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a browser to use"
    if [[ "$baseos" == "Athena Fedora" ]]; then
        browser=$(gum choose --limit 1 firefox brave)
    elif [[ "$baseos" == "Athena Nix" ]]; then
        browser=$(gum choose --limit 1 firefox)
    fi
}

Terminal() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a terminal to use"
    if [[ "$baseos" == "Athena Fedora" ]]; then
        terminal=$(gum choose --limit 1 --height 20 alacritty kitty 'cool retro term' foot 'gnome terminal' 'konsole' 'terminator' 'terminology' 'urxvt' 'xfce' 'xterm')
    elif [[ "$baseos" == "Athena Nix" ]]; then
        terminal=$(gum choose --limit 1 alacritty kitty)
    fi
}

Misc() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Some miscellaneous settings" "Use space to enable/disable"
    misc_settings=$(gum choose --limit 3 --height 20 "Enable ipv6" "Enable zramd" "Enable flatpak")
    enable_ipv6="false"
    enable_zramd="false"
    enable_flatpak="false"
    if [[ $misc_settings == *"ipv6"* ]]; then
        enable_ipv6="true"
    fi
    if [[ $misc_settings == *"zramd"* ]]; then
        enable_zramd="true"
    fi
    if [[ $misc_settings == *"flatpak"* ]]; then
        enable_flatpak="true"
    fi
}

InstallParams() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Please enter the number of cores assigned to the installer (0: all)"
    while ! [[ "$cores" =~ ^[0-9]+$ ]]; do
        cores=$(gum input --placeholder "Please enter a core number")
        [ -z "$cores" ] && echo "Please enter a value."
        [ -n "$cores" ] && ! [[ "$cores" =~ ^[0-9]+$ ]] && echo "Please enter a valid number."
    done

    clear
    gum style --border normal --margin "1" --padding "1 2" "Please enter the number of maximum jobs assigned to the installer"
    while ! [[ "$jobs" =~ ^[0-9]+$ ]]; do
        jobs=$(gum input --placeholder "Please enter a jobs number")
        [ -z "$jobs" ] && echo "Please enter a value."
        [ -n "$jobs" ] && ! [[ "$jobs" =~ ^[0-9]+$ ]] && echo "Please enter a valid number."
    done
}

Summary() {
    clear
    CONTINUE=false
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' "Summary, is this correct?" "" "console keymap: $virtkeymap" "GUI keymap: $x11keymap" "timezone: $timezone" "locale: $locale" "username: $username" "password: $password" "root-password: $root_password" "hostname: $hostname" "disk: $disk_dev" "shell: $shell" "desktop: $desktop" "theme: $theme" "display manager: $dm" "browser: $browser" "terminal: $terminal" "ipv6: $enable_ipv6" "enable zramd: $enable_zramd" "enable flatpak: $enable_flatpak" "efi: $is_uefi")" && CONTINUE=true
    if [[ $CONTINUE != "true" ]]; then
        Change
    else
        #if [[ "$baseos" == "Athena Nix" ]]; then
        #    InstallParams
        #fi
        # Remove config.json if it exists
        if [[ $(ls | grep "/tmp/config.json") ]]; then
            rm /tmp/config.json
        fi
        # Make config.json
        echo "{
    \"partition\": {
        \"device\": \"$disk_dev\",
        \"mode\": \"$partmode\",
        \"encrypt_check\": $encrypt_check,
        \"efi\": $is_uefi,
        \"swap\": $create_swap,
        \"swap_size\": \"$swap_size\",
        \"partitions\": [$partitions_setup]
    },
    \"bootloader\": {
        \"type\": \"$grub_type\",
        \"location\": \"$grub_location\"
    },
    \"locale\": {
        \"locale\": [
            \"$locale\"
        ],
        \"virtkeymap\": \"$virtkeymap\",
        \"x11keymap\": \"$x11keymap\",
        \"timezone\": \"$timezone\"
    },
    \"networking\": {
        \"hostname\": \"$hostname\",
        \"ipv6\": $enable_ipv6
    },
    \"users\": [
        {
            \"name\": \"$username\",
            \"password\": \"$hashed_password\",
            \"hasroot\": true,
            \"shell\": \"$shell\"
        }
    ],
    \"rootpass\": \"$hashed_root_password\",
    \"desktop\": \"$desktop\",
    \"theme\": \"$theme\",
    \"displaymanager\": \"$dm\",
    \"browser\": \"firefox\",
    \"terminal\": \"kitty\",
    \"extra_packages\": [
    
    ],
    \"flatpak\": $enable_flatpak,
    \"zramd\": $enable_zramd,
    \"kernel\": \"linux\",
    \"params\": {
        \"cores\": \"0\",
        \"jobs\": \"32\"
    }
}" > /tmp/config.json
    fi
}

Change() {
    gum style --border normal --margin '1' --padding '1 2' "What do you want to change?"
    if [[ "$desktop" != "bspwm" ]] && [[ "$desktop" != "hyprland" ]]; then
        $(gum choose --limit 1 --height 25 Timezone VirtKeymap X11Keymap Locale Username Password RootPassword Shell Hostname Partitioning Desktop Theme DisplayManager Browser Terminal Misc Exit)
    else
        $(gum choose --limit 1 --height 25 Timezone VirtKeymap X11Keymap Locale Username Password RootPassword Hostname Partitioning Desktop DisplayManager Browser Terminal Misc Exit)
    fi
    Summary
}

Install() {
    CONTINUE=false
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' "Are you sure you want to install?" "$(gum style --foreground "$warning_color" 'WARNING: This will erase the selected partitions')")" && CONTINUE=true
    if [[ $CONTINUE != "true" ]]; then
        Exit
    else
        if [[ "$baseos" == "Athena Fedora" ]]; then
            sudo aegis-fedora config /tmp/config.json
        elif [[ "$baseos" == "Athena Nix" ]]; then
            sudo aegis-nix config /tmp/config.json
        fi
        # Capture the exit code of last command
        exit_code=$?

        # Check if the command failed
        if [ $exit_code -ne 0 ]; then
            # Ask the user if they want to generate logs
            read -p "Do you want to generate logs of the failed install to communicate to the team? (Y/n) " response

            # Default to 'Y' if the user just presses enter
            response=${response:-Y}

            # Check if the response is 'Y' or 'y'
            if [[ $response =~ ^[Yy]$ ]]; then
                # Run the log commands
                echo "Generating logs..."
                cat /tmp/aegis.log | nc termbin.com 9999
                echo "Logs generated."
            fi
        fi
    fi
}

Exit() {
    clear
    echo "Exiting. Have a good day!"
    exit    
}

Welcome
Timezone
VirtKeymap
X11Keymap
Locale
Username
Password
RootPassword
Hostname
UEFICheck
Partitioning
Desktop
if [[ "$desktop" != "bspwm" ]] && [[ "$desktop" != "hyprland" ]] && [[ "$desktop" != "none" ]]; then
    Shell
    Theme
fi
#if [[ "$desktop" != "none" ]] && [[ "$desktop" != "hyprland" ]]; then
#    Browser
#fi
if [[ "$desktop" != "none" ]]; then
    DisplayManager
#    Terminal
fi
Misc
Summary
Install
