#!/bin/bash

version="1.0.0"

main_color="#ffd700"
warning_color="#ff0000"

export BORDER_FOREGROUND="$main_color"
export GUM_CONFIRM_SELECTED_BACKGROUND="$main_color"
export GUM_CHOOSE_CURSOR_FOREGROUND="$main_color"
export GUM_CHOOSE_SELECTED_FOREGROUND="$main_color"
export GUM_INPUT_CURSOR_FOREGROUND="$main_color"
export GUM_FILTER_INDICATOR_FOREGROUND="$main_color"
export FOREGROUND="#ffffff"

Welcome() {
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' "$(gum style --foreground "$main_color" '          ▗▄▄▄       ▗▄▄▄▄    ▄▄▄▖
          ▜███▙       ▜███▙  ▟███▛
           ▜███▙       ▜███▙▟███▛
            ▜███▙       ▜██████▛
     ▟█████████████████▙ ▜████▛     ▟▙
    ▟███████████████████▙ ▜███▙    ▟██▙
           ▄▄▄▄▖           ▜███▙  ▟███▛
          ▟███▛             ▜██▛ ▟███▛
         ▟███▛               ▜▛ ▟███▛
▟███████████▛                  ▟██████████▙
▜██████████▛                  ▟███████████▛
      ▟███▛ ▟▙               ▟███▛
     ▟███▛ ▟██▙             ▟███▛
    ▟███▛  ▜███▙           ▝▀▀▀▀
    ▜██▛    ▜███▙ ▜██████████████████▛
     ▜▛     ▟████▙ ▜████████████████▛
           ▟██████▙       ▜███▙
          ▟███▛▜███▙       ▜███▙
         ▟███▛  ▜███▙       ▜███▙
         ▝▀▀▀    ▀▀▀▀▘       ▀▀▀▘')" "" "Welcome to Aegis TUI" "Ready to make your Athena installation... ready?" "$(gum style --foreground "$main_color" "aegis-tui version: $version")")" && CONTINUE=true
    if [[ $CONTINUE != "true" ]]; then
        echo "Exiting. Have a good day!"
        exit
    fi
}

Timezone() {
    timezone=$(timedatectl list-timezones | gum filter --placeholder "select a timezone")
}

Keymap() {
    keymap=$(localectl list-x11-keymap-layouts | gum filter --placeholder "select a keymap")
}

Locale() {
    locale=$(cat /usr/share/aegis-tui/locales | gum filter --placeholder "select a locale")
    # Using parameter expansion to remove everything after the space
    locale="${locale%% *}"
}

Username() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Please enter your username"
    username=$(gum input --placeholder "Please enter your username")
}

Password() {
    matches="false"
    passwrong="false"
    while [[ "$matches" == "false" ]]; do
        clear
        if [[ "$passwrong" == "true" ]]; then
            gum style --border normal --margin "1" --padding "1 2" "Passwords did not match, please type the password again"
        else
            gum style --border normal --margin "1" --padding "1 2" "Now enter your password"
        fi
        password=$(gum input --password --placeholder "Please enter a password")
        clear
        gum style --border normal --margin "1" --padding "1 2" "Verify your password"
        password_verif=$(gum input --password --placeholder "Type your password again")
        if [[ "$password" == "$password_verif" ]]; then
            matches="true"
        else
            passwrong="true"
        fi
    done
    hashed_password=$(openssl passwd -6 $password)
}

RootPassword() {
    clear
    different_root_password=true
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'Use same password for root?')" && different_root_password=false
    if [[ $different_root_password != "true" ]]; then
        root_password=$password # set root password same as user password
    else
        root_matches="false"
        root_passwrong="false"
        while [[ "$root_matches" == "false" ]]; do
            clear
            if [[ "$root_passwrong" == "true" ]]; then
                gum style --border normal --margin "1" --padding "1 2" "Passwords did not match, please type the root password again"
            else
                gum style --border normal --margin "1" --padding "1 2" "Now enter your root password"
            fi
            root_password=$(gum input --password --placeholder "Please enter a root password")
            clear
            gum style --border normal --margin "1" --padding "1 2" "Verify your root password"
            root_password_verif=$(gum input --password --placeholder "Type your root password again")
            if [[ "$root_password" == "$root_password_verif" ]]; then
                root_matches="true"
            else
                root_passwrong="true"
            fi
        done
    fi
    hashed_root_password=$(openssl passwd -6 ${root_password})
}

Shell() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a default shell"
    shell=$(gum choose --limit 1 fish zsh bash)
}

Hostname() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Please enter a hostname"
    hostname=$(gum input --placeholder "Please enter a hostname")
}

AutoDisk() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Please select the disk to install to" "$(gum style --foreground "$warning_color" 'WARNING: This will erease the whole disk')"
    disk_dev=$(lsblk -pdo name | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1)
    disk=$(echo $disk_dev | awk '{ print substr ($0, 6 ) }')
}

UEFICheck() {
    is_uefi=$([ -d /sys/firmware/efi ] && echo true || echo false)
    if [[ $is_uefi == "true" ]]; then
        grub_type="grub-efi"
        grub_location="/boot"
    else
        grub_type="grub-legacy"
        grub_location="$disk_dev"
    fi
}

ManualDisk() {
    partitions=()
    # 1. Check if UEFI or BIOS
    if [[ $is_uefi == "true" ]]; then
        # 2. Show what the user has to create like in arch wiki
        gum style --border normal --margin "1" --padding "1 2" "Example partition layout:"
        echo ""
        echo ""

        PART_TABLE=$(gum style --border normal "GPT")
        EFI_PART=$(gum style --border normal "EFI system partition")
        EFI_SIZE=$(gum style --border normal "At least 300 MiB")
        SWAP_PART=$(gum style --border normal "Linux swap")
        SWAP_SIZE=$(gum style --border normal "More than 512 MiB")
        ROOT_PART=$(gum style --border normal "Linux x86-64 root")
        ROOT_SIZE=$(gum style --border normal "Remainder of the device")
        EFI_ROW=$(gum join "$EFI_PART" "$EFI_SIZE")
        SWAP_ROW=$(gum join "$SWAP_PART" "$SWAP_SIZE")
        ROOT_ROW=$(gum join "$ROOT_PART" "$ROOT_SIZE")

        gum join --vertical "$PART_TABLE" "$EFI_ROW" "$SWAP_ROW" "$ROOT_ROW"

        # 3. Open cfdisk
        gum style --border normal --margin "1" --padding "1 2" "Please select the disk to partition" "$(gum style --foreground "$warning_color" 'WARNING: This will erease the whole disk')"
        disk_dev=$(lsblk -pdo name | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1 )
        clear
        gum style --border normal --margin "1" --padding "1 2" "Password: athena"
        sudo cfdisk $disk_dev

        # 4. Ask what partition is what
        clear
        gum style --border normal --margin "1" --padding "1 2" "Select EFI partition"
        efi_part=$(lsblk | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1 | awk '{print $1}' | sed 's/├─//;s/└─//')
        clear
        gum style --border normal --margin "1" --padding "1 2" "Select EFI partition mountpoint"
        efi_part_mount=$(gum choose --limit 1 "none" "/" "/boot" "/home" "/opt" "/tmp" "/usr" "var")
        clear
        gum style --border normal --margin "1" --padding "1 2" "Select EFI partition file system"
        efi_part_fs=$(gum choose --limit 1 "none" "fat" "vfat")

        partitions+=("/mnt$efi_part_mount:/dev/$efi_part:$efi_part_fs")

        clear
        gum style --border normal --margin "1" --padding "1 2" "Select root partition"
        root_part=$(lsblk | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1 | awk '{print $1}' | sed 's/├─//;s/└─//')
        clear
        gum style --border normal --margin "1" --padding "1 2" "Select root partition mountpoint"
        root_part_mount=$(gum choose --limit 1 "none" "/" "/boot" "/boot/efi" "/home" "/opt" "/tmp" "/usr" "var")
        clear
        gum style --border normal --margin "1" --padding "1 2" "Select root partition file system"
        root_part_fs=$(gum choose --limit 1 "none" "btrfs" "ext4" "f2fs" "vfat" "xfs")

        partitions+=("/mnt$root_part_mount:/dev/$root_part:$root_part_fs")

        clear
        create_swap=false
        gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'Did you create a swap partition?')" && create_swap=true
        if [[ $create_swap == "true" ]]; then
            swap_part=$(lsblk | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1 | awk '{print $1}' | sed 's/├─//;s/└─//')
            partitions+=("none:/dev/$swap_part:linux-swap")
        fi
    else
        # 2. Show what the user has to create like in arch wiki
        gum style --border normal --margin "1" --padding "1 2" "Example partition layout:"
        echo ""
        echo ""

        PART_TABLE=$(gum style --border normal "DOS")
        SWAP_PART=$(gum style --border normal "Linux swap")
        SWAP_SIZE=$(gum style --border normal "More than 512 MiB")
        ROOT_PART=$(gum style --border normal "Linux x86-64 root")
        ROOT_SIZE=$(gum style --border normal "Remainder of the device")
        SWAP_ROW=$(gum join "$SWAP_PART" "$SWAP_SIZE")
        ROOT_ROW=$(gum join "$ROOT_PART" "$ROOT_SIZE")

        gum join --vertical "$PART_TABLE" "$SWAP_ROW" "$ROOT_ROW"

        # 3. Open cfdisk
        gum style --border normal --margin "1" --padding "1 2" "No need to create GRUB partition. It will be created automatically in the boot sector." "$(gum style 'Please select the disk to partition')" "$(gum style --foreground "$warning_color" 'WARNING: This will erease the whole disk')"
        disk_dev=$(lsblk -pdo name | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1)
        clear
        gum style --border normal --margin "1" --padding "1 2" "Password: athena"
        sudo cfdisk $disk_dev

        # 4. Ask what partition is what
        clear
        gum style --border normal --margin "1" --padding "1 2" "Select root partition"
        root_part=$(lsblk | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1 | awk '{print $1}' | sed 's/├─//;s/└─//')
        clear
        gum style --border normal --margin "1" --padding "1 2" "Select root partition mountpoint"
        root_part_mount=$(gum choose --limit 1 "none" "/" "/boot" "/boot/efi" "/home" "/opt" "/tmp" "/usr" "var")
        clear
        gum style --border normal --margin "1" --padding "1 2" "Select root partition file system"
        root_part_fs=$(gum choose --limit 1 "none" "btrfs" "ext4" "f2fs" "vfat" "xfs")

        partitions+=("/mnt$root_part_mount:/dev/$root_part:$root_part_fs")

        clear
        create_swap=false
        gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'Did you create a swap partition?')" && create_swap=true
        if [[ $create_swap == "true" ]]; then
            swap_part=$(lsblk | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1 | awk '{print $1}' | sed 's/├─//;s/└─//')
            partitions+=("none:/dev/$swap_part:linux-swap")
        fi
    fi

    for partition in "${partitions[@]}"; do
      partitions_setup+="\"$partition\", "
    done
    # Remove the trailing comma
    partitions_setup="${partitions_setup%, }"
}

Swap() {
    clear
    create_swap=false
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'Create a swap partition?')" && create_swap=true
    if [[ $create_swap == "true" ]]; then
        gum style --border normal --margin "1" --padding "1 2" "Select a swap partition size"
        swap_size=$(gum choose --limit 1 1GiB 2GiB 4GiB 8GiB)
    fi
}
    
Partitioning() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a partitioning mode"
    partmode=$(gum choose --limit 1 Auto Manual)

    if [[ "$partmode" == "Auto" ]]; then
        Swap
        AutoDisk
    elif [[ "$partmode" == "Manual" ]]; then
        ManualDisk
    fi
}

Desktop() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a desktop to use"
    desktop=$(gum choose --limit 1 gnome xfce)
}

Theme() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a theme to use"
    theme=$(gum choose --limit 1 graphite)
}

DisplayManager() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a display manager to use"
    dm=$(gum choose --limit 1 gdm lightdm)
}

Browser() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a browser to use"
    browser=$(gum choose --limit 1 firefox)
}

Terminal() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Select a terminal to use"
    terminal=$(gum choose --limit 1 alacritty kitty)
}

Misc() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Some miscellaneous settings" "Use space to enable/disable"
    misc_settings=$(gum choose --limit 4 "Enable ipv6" "Enable snapper" "Enable zramd" "Enable flatpak")
    enable_ipv6="false"
    enable_snapper="false"
    enable_zramd="false"
    enable_flatpak="false"
    if [[ $misc_settings == *"ipv6"* ]]; then
        enable_ipv6="true"
    fi
    if [[ $misc_settings == *"snapper"* ]]; then
        enable_snapper="true"
    fi
    if [[ $misc_settings == *"zramd"* ]]; then
        enable_zramd="true"
    fi
    if [[ $misc_settings == *"flatpak"* ]]; then
        enable_flatpak="true"
    fi
}

InstallParams() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Please enter the number of cores assigned to the installer (0: all)"
    while ! [[ "$cores" =~ ^[0-9]+$ ]]; do
        cores=$(gum input --placeholder "Please enter a core number")
        [ -z "$cores" ] && echo "Please enter a value."
        [ -n "$cores" ] && ! [[ "$cores" =~ ^[0-9]+$ ]] && echo "Please enter a valid number."
    done

    clear
    gum style --border normal --margin "1" --padding "1 2" "Please enter the number of maximum jobs assigned to the installer"
    while ! [[ "$jobs" =~ ^[0-9]+$ ]]; do
        jobs=$(gum input --placeholder "Please enter a jobs number")
        [ -z "$jobs" ] && echo "Please enter a value."
        [ -n "$jobs" ] && ! [[ "$jobs" =~ ^[0-9]+$ ]] && echo "Please enter a valid number."
    done

    clear
    keep_going=false
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' 'Must the installer go on even if a build fails?')" && keep_going=true
}

Summary() {
    clear
    CONTINUE=false
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' "Summary, is this correct?" "" "keymap: $keymap" "timezone: $timezone" "locale: $locale" "username: $username" "password: $password" "Default shell: $shell" "root-password: $root_password" "hostname: $hostname" "disk: $disk" "desktop: $desktop" "ipv6: $enable_ipv6" "enable snapper: $enable_snapper" "enable zramd: $enable_zramd" "enable flatpak: $enable_flatpak" "efi: $is_uefi")" && CONTINUE=true
    if [[ $CONTINUE != "true" ]]; then
        Change
    else
        InstallParams
        # Remove config.json if it exists
        if [[ $(ls | grep "/tmp/config.json") ]]; then
            rm /tmp/config.json
        fi
        # Make config.json
        echo "{
        \"partition\": {
            \"device\": \"$disk\",
            \"mode\": \"$partmode\",
            \"efi\": $is_uefi,
            \"swap\": $create_swap,
            \"swap_size\": \"$swap_size\",
            \"partitions\": [$partitions_setup]
        },
        \"bootloader\": {
            \"type\": \"$grub_type\",
            \"location\": \"$grub_location\"
        },
        \"locale\": {
            \"locale\": [
                \"$locale\"
            ],
            \"keymap\": \"$keymap\",
            \"timezone\": \"$timezone\"
        },
        \"networking\": {
            \"hostname\": \"$hostname\",
            \"ipv6\": $enable_ipv6
        },
        \"users\": [
            {
                \"name\": \"$username\",
                \"password\": \"$hashed_password\",
                \"hasroot\": true,
                \"shell\": \"$shell\"
            }
        ],
        \"rootpass\": \"$hashed_root_password\",
        \"desktop\": \"$desktop\",
        \"theme\": \"$theme\",
        \"displaymanager\": \"$dm\",
        \"browser\": \"$browser\",
        \"terminal\": \"$terminal\",
        \"snapper\": $enable_snapper,
        \"extra_packages\": [
        
        ],
        \"flatpak\": $enable_flatpak,
        \"zramd\": $enable_zramd,
        \"kernel\": \"linux\",
        \"params\": {
            \"cores\": \"$cores\",
            \"jobs\": \"$jobs\",
            \"keep\": $keep_going
        }
    }" > /tmp/config.json
    fi
}

Change() {
    gum style --border normal --margin '1' --padding '1 2' "What do you want to change?"
    $(gum choose --limit 1 Timezone Keymap Locale Username Password RootPassword Shell Hostname Partitioning Desktop Misc)
    Summary
}

Install() {
    CONTINUE=false
    gum confirm --selected.foreground="#2B2B2B" "$(gum style --border normal --margin '1' --padding '1 2' "Are you sure you want to install?" "$(gum style --foreground "$warning_color" 'WARNING: This will erease the whole disk')")" && CONTINUE=true
    if [[ $CONTINUE != "true" ]]; then
        echo "Exiting. Have a good day!"
        exit
    else
        #sudo athena-aegis config /tmp/config.json
        echo "Running fake sudo athena-aegis config /tmp/config.json"
    fi
}

Welcome
Timezone
Keymap
Locale
Username
Password
RootPassword
Shell
Hostname
UEFICheck
Partitioning
Desktop
Theme
DisplayManager
Browser
Terminal
Misc
Summary
Install
